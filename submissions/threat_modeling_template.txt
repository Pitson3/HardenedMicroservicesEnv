Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

A. Docker Client
This is the command line based inteface for interacting with the docker daemon. The common problems that may arise here include: 
- Client compromise, whereby the docker desktop application running on the administrator's machine can be breached or compromised
- Client authorizatrion abuse, whereby the authorised access to the client can be abused so as to make privileged changes
- Dockerfile Misconfiguration, whereby the dockerfile can be insecurely or poorly crafted and built

That being said, some of the potential threats here may include:
- Information Disclosure, the client may expose sensitive information via hardcoding the secret values in the configuration files.
- Elevation of privilege, whereby a user is not specified in the dockerfile thereby defaulting to executing the containers with the root user privileges which then affects client authorization and 
dockerfile.


B. Docker Host
This is the machine that has docker installed on it and it hosts the containers. Meanwhile, the issues thatmay arise here covers:
- Isolation tampering, which is concerned with the isolation of the namespace to avoid container escape attacks
- Use of the --privileged flag to force the elevation of privileges on the host machine
- Insecure deafults
- Misconfigurations

Besides, the following are some of the potential threats here:
- Tampering, which involves unauthorized changing of the daemon configuration through a compromized client thereby leading to misconfiguration.

C. Docker Registry
This is the store for the docker images. Things that may go wrong here include Image Security, Open Source Software Security and Docker registry security. On the other hand, the potential threats 
include:
- Spoofing, whereby the legitimate image or dependences may be replaced with the illegitimate ones. This will then affect image security
- Denial of service, whereby there may not be proper restrictions on the amount of content accepted by the user with the specific docker distribution


Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

A. Control Plane 
This is a collection of master nodes where the master node refers to a node which controls and manages a set of worker nodes(workloads runtime) and resembles a cluster in kubernetes(Suse Community).
It has 5 service entities, namely:
- kube-apiserver: The primary control plane that exposes the Kubernetes API.
- etcd: This is the key-value store that is used as the Kubernetes' backing store for all cluster data.
- kube-scheduler: The component that watches for the the newly created pods with no assigned node and then selects a node for them to run on.
- kube-controller-manager: The component that runs the controller processes.
- cloud-controller-manager: This is an optional component that exposes the Kube API to the cloud providers like GCP so as to orchestrate kubernetes

That being said, the following are the potential threats:
- Repudiation: An unauthorized changes may be made to the API server if no trusted callers can authenticate to the API server through enforcing TLS.
- Denial of Service: Excessive traffic to the API server can overwhelm the endpoint. As such, kube-scheduler can incorrectly schedule the pod.
- Tampering: This may involves changing the configuration of the etcd by an attacker,and also the modification of vital system-level configurations.  	

B. Data Plane 
This is the collection of worker nodes, where a worker node is used to handle networking to ensure that traffic between applications across the cluster and from outside of the cluster cab be properly
facilitated(Oracle docs). The plane has 2 service entinties,namely:
- kubelet: This is an agent that runs on each node in the cluster by making sure that containers are running in a pod.
- kube-proxy: This is a network proxy that runs on each node in the cluster, thereby maintaining network rules on nodes.

That being said, the following are the potential threats here:
- Elevation of privileges: The privileges can be escalated by an attacker and this will affect the kubelet entity
- Information Disclosure: The kube-proxy can expose the sensitive information if the --kubeconfig flag is not set to permissions 644 or less permissive

Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).

[FAIL] 2.7 Ensure TLS authentication for Docker daemon is configured (Automated)
[FAIL] 2.14 Ensure containers are restricted from acquiring new privileges (Automated)
[FAIL] 3.22 Ensure that /etc/default/docker file permissions are set to 644 or more restrictive (Automated)
